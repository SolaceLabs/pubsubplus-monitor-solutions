input {  
  tcp { 
    port => "514" 
    type => syslog
  } 
} 

filter {
  if [type] == "syslog" {

    #### MGMT: command.log SEMP, CLI, SHELL
    if [message] =~ /: CLI\/|: SEMP\/|: SHELL/ {
      grok {
        match     => { "message" => "%{SOLACE_REMOTE_COMMAND}" }
        match     => { "message" => "%{SOLACE_SHELL_COMMAND}" }
        add_field => { "solace_event_id" => "MGMT_%{solace_cmd_source}" }
        add_field => { "solace_scope"    => "MGMT" }
      }
    } 

    ### EVENTS: event.log or system.log w/vpn-specific tagging
    else if [message] =~ / CLIENT:| VPN:| SYSTEM:/ {
      grok {
        match => { "message" => "%{SOLACE_EVENT_LOG}" }
      }
    }

    ### UNKNOWN: just parse the SYSLOG basics and force the rest into the solace_message field
    else {
      grok {
        match => { "message" => "%{SYSLOG_PREAMBLE} %{GREEDYDATA:solace_message}" }
        # Set solace fields so we can search for these cases
        add_field => { "solace_event_id" => "UNKNOWN" }
        add_field => { "solace_scope" => "UNKNOWN" }
      }
    }

    # Does the nasty parsing of the syslog_pri field into facility+severity
    # Have to wait til the SYSLOG_PREAMBLE has been grokked first
    syslog_pri {}

  }
}

output { 
  if [type] == "syslog" and "_grokparsefailure" in [tags] {
    file { path => "./failed_syslog_events.log" }
  }

  elasticsearch { 
    host => localhost 
  }  
}
