<project name="solgeneosmonitors" default="dist" basedir="." xmlns="antlib:org.apache.tools.ant" xmlns:if="ant:if" xmlns:unless="ant:unless">
    <description>SolGeneos Monitors, Copyright 2015 Solace Systems, Inc.</description>

    <property name="Name" value="SolGeneos Monitors"/>
    <property name="name" value="solgeneos-monitors"/>
    <!--property name="prefix" value="cs"/-->
    <property name="vendor.name" value="Solace Systems Inc."/>
    <property name="vendor.id" value="com.solacesystems.solgeneos"/>

    <property name="filename" value="${name}"/>
    <property name="project.version" value="1.0.10"/>
    
    <!-- distribution related properties -->
    <property name="dist.dir" value="${basedir}/_antDist"/>
    <property name="dist.name" value="${filename}_v${project.version}"/>
    <property name="dist.name.src" value="${dist.name}-src"/>
    <property name="dist.dir.bin" value="${dist.dir}/${dist.name}"/>
    <property name="dist.dir.src" value="${dist.dir}/${dist.name.src}"/>

	<!-- macro definition for iterating over property files -->
    <macrodef name="iterate">
        <attribute name="list" />
        <element name="call" implicit="yes" />
        <sequential>
            <local name="element" />
            <local name="tail" />
            <local name="hasMoreElements" />
            <!-- unless to not get an error on empty lists -->
            <loadresource property="element" unless:blank="@{list}">
                <concat>@{list}</concat>
                <filterchain>
                    <replaceregex pattern="([^;]*).*" replace="\1" />
                </filterchain>
            </loadresource>
            <!-- call the tasks that handle the element -->
            <call />

            <!-- recursion -->
            <condition property="hasMoreElements">
                <contains string="@{list}" substring=";" />
            </condition>

            <loadresource property="tail" if:true="${hasMoreElements}">
                <concat>@{list}</concat>
                <filterchain>
                    <replaceregex pattern="[^;]*;(.*)" replace="\1" />
                </filterchain>
            </loadresource>

            <iterate list="${tail}" if:true="${hasMoreElements}">
                <call />
            </iterate>
        </sequential>
    </macrodef>

    <!-- imports antcontrib for regex parsing -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
      <classpath>
        <pathelement location="${basedir}/lib/compileLib/ant-contrib-1.0b3.jar"/>
      </classpath>
    </taskdef>

    <!-- updates the version number in CustomMonitorConstants -->
    <target name="updateversion" description="updates the version number in CustomMonitorConstants.java">
        <echo message="Updating version to: ${project.version}" />
        <replaceregexp file="${basedir}/GenericMonitor/src/com/solacesystems/solgeneos/monitor/CustomMonitorConstants.java"
            match="static final public String VERSION[\h]+= &quot;[\w.]*&quot;;"
            replace="static final public String VERSION                = &quot;${project.version}&quot;;"/>
    </target>

    <!-- creates custom monitors based on property files -->
    <target name="createmonitors" description="creates custom monitors based on property files">
        <echo message="creating monitor: ${monitorname}" />
        <copy file="${basedir}/GenericMonitor/src/com/solacesystems/solgeneos/monitor/TemplateMonitor.java" 
            tofile="${basedir}/GenericMonitor/src/com/solacesystems/solgeneos/usermonitor/${monitorname}.java"/>
        <replaceregexp file="${basedir}/GenericMonitor/src/com/solacesystems/solgeneos/usermonitor/${monitorname}.java"
            match="package com.solacesystems.solgeneos.monitor;"
            replace="package com.solacesystems.solgeneos.usermonitor;"/>
        <replaceregexp file="${basedir}/GenericMonitor/src/com/solacesystems/solgeneos/usermonitor/${monitorname}.java"
            match="class TemplateMonitor"
            replace="class ${monitorname}"/>
        <replaceregexp file="${basedir}/GenericMonitor/src/com/solacesystems/solgeneos/usermonitor/${monitorname}.java"
            match="extends GenericMonitor"
            replace="extends com.solacesystems.solgeneos.monitor.GenericMonitor"/>
    </target>

	<!-- iterate over property files and generate custom monitor classes -->
    <target name="iteratemonitorproperties" description="Iterates over each custom monitor property file">
        <fileset id="artifacts.fs" dir="GenericMonitor/config">
            <include name="*.properties" />
        </fileset>
        <pathconvert refid="artifacts.fs" property="artifacts.str" />
        <echo message="List of property files: ${artifacts.str}" />
        <!-- unless is required for empty lists to not call the enclosed tasks -->
        <iterate list="${artifacts.str}" unless:blank="${artifacts.str}">
            <propertyregex property="pfilename" input="${element}" regexp="([a-zA-Z0-9_\.]*)(\.properties)" select="\0" override="true"/>
            <echo message="Processing ${pfilename}" />
            <propertyregex property="monitorname" input="${element}" regexp="([a-zA-Z0-9_\.]*)(\.properties)" select="\1" override="true"/>
            <condition property="notgeneric">
                <equals arg1="GenericMonitor" arg2="${monitorname}"/>
            </condition>
            <antcall target="createmonitors" unless:true="${notgeneric}">
            	<param name="monitorname" value="${monitorname}" />
            </antcall>
            <echo if:set="notgeneric">Skipping generic monitor... </echo>
        </iterate>
    </target>


    <!-- cleans -->
    <target name="clean" description="Clean output">
        <subant target="clean">
            <fileset dir="." includes="**/build.xml" excludes="build.xml"/>
        </subant>
        
        <delete dir="${dist.dir}"/>
        <delete>
          <fileset dir=".">
            <include name="${filename}_v*.tar.gz"/>
          </fileset>
        </delete>

    </target>

    <!-- build -->
    <target name="build" depends="updateversion, iteratemonitorproperties, distLib" description="Build monitor jars">    
        <subant target="build">
            <fileset dir="." includes="**/build.xml" excludes="build.xml, MonitorUtils/build.xml"/>
        </subant>
    </target>
    
    <target name="build-util" description="Build the monitor util jar">
        <mkdir dir="${basedir}/MonitorsUtil/lib/compileLib"/>
        <mkdir dir="${basedir}/MonitorsUtil/lib/bundledLib"/>
        <!-- Copy deps -->
        <copy toDir="${basedir}/MonitorsUtil/lib/compileLib" overwrite="true">
            <fileset dir="${basedir}/lib/compileLib">
                <include name="httpclient-*.jar"/>
                <include name="httpcore-*.jar"/>
                <include name="sol-common-*.jar"/>
                <include name="sol-geneosagent-*.jar"/>
                <include name="xmlrpc-client-*.jar"/>
                <include name="xmlrpc-common-*.jar"/>
            	<exclude name="ant-contrib-*.jar"/>
            </fileset>
        </copy>
        
        <!-- build util jar -->
        <subant target="build">
            <fileset dir="${basedir}/MonitorsUtil" includes="build.xml" />
        </subant>
        
        <!-- Copy output to root lib dir -->
        <copy toDir="${basedir}/lib/bundledLib" overwrite="true">
            <fileset dir="${basedir}/MonitorsUtil/_antDist/lib">
                <include name="*.jar"/>
            </fileset>
        </copy>
    </target>
    
    <target name="distLib" depends="build-util" description="Distribute the libs to the projects">
        <fileset dir="lib" id="libs">
            <exclude name="**/ant-contrib*.jar"/>
        </fileset>
        <copy toDir="GenericMonitor/lib">
            <fileset refid="libs"/>
        </copy>
    </target>

    <!-- clean build for distribution -->
	<target name="dist-bin" depends="clean, distLib, build" description="Clean output and then build monitor jars">	
        <mkdir dir="${dist.dir.bin}"/>
        <mkdir dir="${dist.dir.bin}/config"/>
        <mkdir dir="${dist.dir.bin}/lib"/>

        <copy toDir="${dist.dir.bin}/config">
            <fileset dir="config"/>
        </copy>

        <copy toDir="${dist.dir.bin}">
            <fileset dir="GenericMonitor/_antDist"/>
            <fileset dir="${basedir}">
                <include name="README.txt"/>
                <include name="install-solgeneos-monitors.sh"/>
            </fileset>
        </copy>

        <!--tar and gzip agent package-->
        <tar longfile="gnu" destfile="${dist.name}.tar">
            <tarfileset dir="${dist.dir}">
                <include name="${dist.name}/**"/>
            </tarfileset>
        </tar>
        <gzip destfile="${dist.name}.tar.gz" src="${dist.name}.tar"/>
        <delete file="${dist.name}.tar"/>
    </target>

    <target name="dist-src" depends="distLib" description="generates source distribution package">
        <mkdir dir="${dist.dir.src}"/> 
        <mkdir dir="${dist.dir.src}/lib"/>
        <mkdir dir="${dist.dir.src}/config"/>

        <copy todir="${dist.dir.src}/" overwrite="true">
            <fileset dir="${basedir}">
                <include name="**/**"/>
                <exclude name="_*/**"/>
                <exclude name="**/_*/**"/>
                <exclude name="bin/**"/>
                <exclude name="**/bin/**"/>
                <exclude name="**/lib/**"/>
                <exclude name="${dist.name}.tar.gz"/>
            </fileset>
        </copy>

        <copy todir="${dist.dir.src}/lib" overwrite="true">
            <fileset dir="${basedir}/lib">
                <exclude name="**/ant-contrib-*"/>
                <include name="**/**"/>
            </fileset>
        </copy>

        <copy todir="${dist.dir.src}/config" overwrite="true">
            <fileset dir="${basedir}/config">
            </fileset>
        </copy>

        <!--tar and gzip agent package-->
        <tar longfile="gnu" destfile="${dist.name.src}.tar">
            <tarfileset dir="${dist.dir}">
                <include name="${dist.name.src}/**"/>
            </tarfileset>
        </tar>
        <gzip destfile="${dist.name.src}.tar.gz" src="${dist.name.src}.tar"/>
        <delete file="${dist.name.src}.tar"/>
    </target>

    <target name="dist" depends="dist-bin,dist-src" description="Build all packages">
    <!-- DPO<target name="dist" depends="clean, distLib, build" description="Build all packages"> -->
    </target>

</project>
