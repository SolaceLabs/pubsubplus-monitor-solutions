/**
 * Copyright 2016-2017 Solace Corporation. All rights reserved.
 *
 * http://www.solace.com
 *
 * This source is distributed under the terms and conditions of any contract or
 * contracts between Solace Corporation ("Solace") and you or your company. If
 * there are no contracts in place use of this source is not authorized. No
 * support is provided and no distribution, sharing with others or re-use of 
 * this source is authorized unless specifically stated in the contracts 
 * referred to above.
 *
 * This software is custom built to specifications provided by you, and is 
 * provided under a paid service engagement or statement of work signed between
 * you and Solace. This product is provided as is and is not supported by 
 * Solace unless such support is provided for under an agreement signed between
 * you and Solace.
 */

// The file containing the version num
ext.versionFile = file('version.properties')

def projectVersion = readVersion()

allprojects {
    // Version no to apply to all projects
    version = projectVersion

    // Eclipse plugin to generate project and classpath files
    apply plugin: 'eclipse'
}

subprojects {
    // Common plugin to apply to all projects.
    apply plugin: 'java'
    apply plugin: 'jacoco'

    // Java JDK minimum source compatibility
    sourceCompatibility = '1.7'

    // In this section you declare where to find the dependencies of your project
    repositories {
        flatDir(dir: "${rootDir}/libs", name: 'Local libs directory')

        // You can declare any Maven/Ivy/JCenter/file repository here as well.
        mavenCentral()
    }
    // In this section you declare the dependencies for your production and test code
    dependencies {
        // Solace Messaging API for Java Dependencies
        compile 'commons-lang:commons-lang:2.6'
        compile 'commons-logging:commons-logging:1.1.3'
        compile 'com.solacesystems:sol-common:10.3.1'
        compile 'com.solacesystems:sol-jcsmp:10.3.1'
        compile 'javax.xml:jsr173_api'
		
		compile 'org.json:json:20151123'

        // Logging dependencies
        // SLF4J logging API is used at compile time and at run time we use log4j binding
        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
        runtime group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.7'
        runtime group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.7'
        runtime group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.7'
        //runtime 'org.apache.log4j:log4j:1.2.17'

        // JSON API dependency
        compile 'javax.json:javax.json-api:1.0'

        // Other misc dependencies
        compile 'org.apache.commons:commons-codec:1.6'
        
        compile 'org.apache.httpcomponents:httpclient:4.5'
	compile 'org.apache.httpcomponents:httpcore:4.4'

        // Declare the dependency for your favourite test framework you want to use in your tests.
        // TestNG is also supported by the Gradle Test task. Just change the
        // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
        // 'test.useTestNG()' to your build script.
        testCompile 'junit:junit:4.12'
        // Set this dependency if you want to use Hamcrest matching
        testCompile 'org.hamcrest:hamcrest-core:1.3'
    }

    jacocoTestReport {
        group = "reporting"
        description = "Generate Jacoco coverage reports after running tests."
        reports {
            xml.enabled true
            html.enabled true
            csv.enabled false
        }
    }
}

// Declare the project dependencies here
project(':pump') {
    dependencies {
        compile project(':pwd-utility')
    }
}


project(':stats-receiver') {
    dependencies {
        compile project(':pwd-utility'), project(':pump')
		
		// Include the Apache http core libs as part of the receiver image, so that when Influx DB / Elasticsearch
		// plug in is used, the jars are already present. If not using InfluxDB / Elasticsearch, these jars might 
		// be able to be removed from the install.
		runtime 'org.apache.httpcomponents:httpclient:4.5'
		runtime 'org.apache.httpcomponents:httpcore:4.4'
    }
}

project(':receiver-plugins:influxdb') {
    // Declare the dependencies for the individual statspump listeners here
    dependencies {
        compile project(':pwd-utility'), project(':stats-receiver')
		
		compile 'org.apache.httpcomponents:httpclient:4.5'
		compile 'org.apache.httpcomponents:httpcore:4.4'
    }
}

project(':receiver-plugins:elasticsearch') {
    // Declare the dependencies for the individual statspump listeners here
    dependencies {
        compile project(':pwd-utility'), project(':stats-receiver')
		
		compile 'org.apache.httpcomponents:httpclient:4.5'
		compile 'org.apache.httpcomponents:httpcore:4.4'
    }
}

// Prints versions
task printVersion(group: 'versioning', description: 'Displays the project version') {
	doLast {
    	logger.quiet "StatsPump Project Version: $version"
    }
}

// Task to increment version no
tasks.addRule("Pattern: increment<Classifier>Version – Increments the project version classifier.") { String taskName ->
    if(taskName.startsWith('increment') && taskName.endsWith('Version')) {
        task(taskName) << {
            String classifier = (taskName - 'increment' - 'Version').toLowerCase()
            String currentVersion = version.toString()
            switch(classifier) {
                case 'major': ++version.major
                    break
                case 'minor': ++version.minor
                    break
                case 'patch': ++version.patch
                    break
                default: throw new GradleException("Invalid version type '$classifier. Allowed types: ['Major', 'Minor', 'Patch']")
            }
            String newVersion = version.toString()
            logger.info "Incrementing $classifier project version: $currentVersion -> $newVersion"
            
            ant.propertyfile(file: versionFile) {
                entry(key: classifier, type: 'int', operation: '+', value: 1)
            }

            logger.quiet "New Version: $version"
        }
    }
}

// CopySpec definitiion for generating source distributions
def sourcePumpFiles = copySpec {
    from('pump') {
        include "config/**"
        include "resources/**"
        include "scripts/**"
        include "src/**"
        include "*.gradle"
        include "README.md"
    }
}

def sourceReceiverFiles = copySpec {
    from('stats-receiver') {
        include "src/**"
        include "config/**"
        include "scripts/**"
        include "templates/**"
        include "*.gradle"
        include "README.md"
    }
}

def sourceInfluxdbFiles = copySpec {
    from('receiver-plugins/influxdb') {
        include "src/**"
        include "*.gradle"
    }
}

def sourceElasticsearchFiles = copySpec {
    from('receiver-plugins/elasticsearch') {
        include "src/**"
        include "*.gradle"
    }
}

def sourcePwdUtilFiles = copySpec {
    from('pwd-utility') {
        include "src/**"
        include "*.gradle"
        include "README.md"
    }
}

def sourceCommonFiles = copySpec {
    from(rootDir) {
        include 'README.md'
        include 'LICENSE'
        include versionFile.name
        include "build.gradle"
        include "settings.gradle"
        include "gradlew*"
        include "gradle/**"
        include "libs/**"
    }
    into 'pwd-utility', {
        with sourcePwdUtilFiles
    }
}

// Task to generate various source distributions
tasks.addRule("Pattern: dist<Classifier>Src – Generates a source distribution for the classifier.") { String taskName ->
    if(taskName.startsWith('dist') && taskName.endsWith('Src')) {
        task(taskName, type: Zip) {
            String classifier = (taskName - 'dist' - 'Src').toLowerCase()
            String srcBaseName = 'solace-'+classifier+'-src-'+projectVersion
            File srcDistDir = file("${rootDir}/_dist/$classifier/")
            switch(classifier) {
                case 'pump': 
                    baseName = srcBaseName.replace('pump', 'statspump')
                    destinationDir = srcDistDir
                    with sourceCommonFiles
                    into 'pump', {
                        with sourcePumpFiles
                    }
                    break
                case 'stats-receiver':
                    baseName = srcBaseName
                    destinationDir = srcDistDir
                    with sourceCommonFiles
                    into 'stats-receiver', {
                        with sourceReceiverFiles
                    }
                    break
                case 'influxdb':
                    baseName = srcBaseName
                    destinationDir = srcDistDir
                    with sourceCommonFiles
                    into 'stats-receiver', {
                        with sourceReceiverFiles
                    }
                    into 'receiver-plugins/influxdb', {
                        with sourceInfluxdbFiles
                    }
                    break
                case 'elasticsearch':
		    baseName = srcBaseName
		    destinationDir = srcDistDir
		    with sourceCommonFiles
		    into 'stats-receiver', {
			with sourceReceiverFiles
		    }
		    into 'receiver-plugins/elasticsearch', {
			with sourceElasticsearchFiles
		    }
                    break
                case 'all':
                    baseName = srcBaseName.replace('all', 'enterprise-stats')
                    destinationDir = srcDistDir
                    with sourceCommonFiles
                    into 'pump', {
                        with sourcePumpFiles
                    }
                    into 'stats-receiver', {
                        with sourceReceiverFiles
                    }
                    into 'receiver-plugins/influxdb', {
                        with sourceInfluxdbFiles
                    }
                    into 'receiver-plugins/elasticsearch', {
		        with sourceElasticsearchFiles
                    }
                    break
                default: throw new GradleException("Invalid source distribution type '$classifier. Allowed types: ['All', 'Pump', 'Stats-Receiver', 'Influxdb', 'Elasticsearch']")
            }

            logger.quiet "Source package generated for: $classifier"
        }
    }
}

// Some convenient Groovy method and class to load version num
ProjectVersion readVersion() {
    logger.info 'Reading the version file.'
    if(!versionFile.exists()) {
        throw new GradleException("Required version file does not exist: $versionFile.canonicalPath")
    }
    Properties versionProps = new Properties()
    versionFile.withInputStream { stream ->
        versionProps.load(stream)
    }
    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.patch.toInteger())
}

class ProjectVersion {
    Integer major
    Integer minor
    Integer patch

    ProjectVersion(Integer major, Integer minor, Integer patch) {
        this.major = major
        this.minor = minor
        this.patch = patch
    }

    @Override
    String toString() {
        "$major.$minor.$patch"
    }
}